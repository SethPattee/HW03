@using Microsoft.Maui.Controls
@page "/battery"

<h3>BatteryTesting</h3>

<input type="checkbox" @onchange="bat" />

@if (!string.IsNullOrEmpty(BatteryStateText))
{
    <p>@BatteryStateText</p>
}

@if (!string.IsNullOrEmpty(BatteryLevelText))
{
    <p>@BatteryLevelText</p>
}

@if (!string.IsNullOrEmpty(BatteryPowerSourceText))
{
    <p>@BatteryPowerSourceText</p>
}

@code {

    private bool _isBatteryWatched;
    private string BatteryStateText;
    private string BatteryLevelText;
    private string BatteryPowerSourceText;
    object sender;
    ToggledEventArgs e;
    public void bat()
    {
        BatterySwitch_Toggled(sender, e);
    }
    private void BatterySwitch_Toggled(object sender, ToggledEventArgs e) => WatchBattery();

    private void WatchBattery()
    {
        if (!_isBatteryWatched)
        {
            Battery.EnergySaverStatusChanged += Battery_EnergySaverStatusChanged;
            Battery.BatteryInfoChanged += Battery_BatteryInfoChanged;
        }
        else
        {
            Battery.EnergySaverStatusChanged -= Battery_EnergySaverStatusChanged;
            Battery.BatteryInfoChanged -= Battery_BatteryInfoChanged;
        }

        _isBatteryWatched = !_isBatteryWatched;
    }

    private void Battery_BatteryInfoChanged(object sender, BatteryInfoChangedEventArgs e)
    {
        MainThread.BeginInvokeOnMainThread(() =>
        {
            BatteryStateText = e.State switch
            {
                BatteryState.Charging => "Battery is currently charging",
                BatteryState.Discharging => "Charger is not connected and the battery is discharging",
                BatteryState.Full => "Battery is full",
                BatteryState.NotCharging => "The battery isn't charging.",
                BatteryState.NotPresent => "Battery is not available.",
                BatteryState.Unknown => "Battery is unknown",
                _ => "Battery is unknown"
            };

            BatteryLevelText = $"Battery is {e.ChargeLevel * 100}% charged.";
            SetChargeModeLabel();
        });
    }

    private void Battery_EnergySaverStatusChanged(object sender, EnergySaverStatusChangedEventArgs e)
    {
        MainThread.BeginInvokeOnMainThread(() =>
        {
            // Handle energy saver status change if needed
        });
    }

    private void SetChargeModeLabel()
    {
        MainThread.BeginInvokeOnMainThread(() =>
        {
            BatteryPowerSourceText = Battery.PowerSource switch
            {
                BatteryPowerSource.Wireless => "Wireless charging",
                BatteryPowerSource.Usb => "USB cable charging",
                BatteryPowerSource.AC => "Device is plugged into a power source",
                BatteryPowerSource.Battery => "Device isn't charging",
                _ => "Unknown"
            };
        });
    }
}
